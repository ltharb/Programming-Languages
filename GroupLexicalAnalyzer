package GroupLexicalAnalyzer;

import java.io.*;
import java.lang.*;

public class GroupLexicalAnalyzer {

	/*Variables*/
	private static int lexLen;
	private static String charClass, token, nextToken;
	private static char[] lexeme = new char[100];
	private static char nextChar;
	private static int index = 0;
	private static String line;
	
	/*Character classes*/
	private static final String LETTER = "0";
	private static final String DIGIT = "1";
	private static final String UNKNOWN = "99";
	
	/*Token codes*/
	private static final String INT_LIT = "INT_LIT";
	private static final String IDENT = "IDENT";
	private static final String ASSIGN_OP = "ASSIGN_OP";
	private static final String ADD_OP = "ADD_OP";
	private static final String SUB_OP = "SUB_OP";
	private static final String MULT_OP = "MULT_OP";
	private static final String DIV_OP = "DIV_OP";
	private static final String LEFT_PAREN = "LEFT_PAREN";
	private static final String RIGHT_PAREN = "RIGHT_PAREN";
	private static final String EOF = "END_OF_FILE";	

	public static void main(String[] args) throws IOException 
	{
		//Opens input file, prints header, loops until all text is processed.
		try {
			File input = new File("src/lexicalAnalyzerPackage/lexInput");
			BufferedReader br = new BufferedReader(new FileReader(input));
	        System.out.println("Elyssa Cochran, Levi Harbin, - , - CSCI4200-DB, Fall 2018, Lexical Analyzer");
	        System.out.println("********************************************************************************");
	        while((line = br.readLine()) != null){        	
	        	System.out.println("Input: " + line);
	        	nextLine();
				getChar();
				do { 
					lex();	
				} while (nextToken != EOF);
				System.out.println("********************************************************************************");
			}
	        System.out.printf("Next token is: %-15s Next lexeme is ", nextToken);
			System.out.println(lexeme);
	        System.out.println("Lexical analysis of the program is complete!");  
		}
		catch (IOException e) {
		        System.out.println("ERROR - cannot open file 'lexInput.txt'");
		} 
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	// lookup - a function to lookup operations and parentheses and return the appropriate token 
	 
	
	private static String lookup(char ch) {
		switch (ch) {
		case '(':
			addChar();
			nextToken = LEFT_PAREN;
			break;
			
		case ')':
			addChar();
			nextToken = RIGHT_PAREN;
			break;
			
		case '+':
			addChar();
			nextToken = ADD_OP;
			break;
			
		case '-':
			addChar();
			nextToken = SUB_OP;
			break;
			
		case '*':
			addChar();
			nextToken = MULT_OP;
			break;
			
		case '/':
			addChar();
			nextToken = DIV_OP;
			break;
			
		case '=':
			addChar();
			nextToken = ASSIGN_OP;
			break;
			
		default:
			addChar();
			nextToken = EOF;
			break;
		}
		return nextToken;
	}
	
	
	
	
	
	/* addChar - a function to add nextChar to lexeme */
	private static void addChar() {
		if (lexLen <= 98) {
			lexeme[lexLen++] = nextChar;
			lexeme[lexLen] = 0;
		}
		else 
			System.out.println("Error: Lexeme is too long");
	}
	
	
	
	
	
	// getChar - a function to get the next character of the input and define its character class

	
	private static void getChar() throws IOException{
		if (isValid()) {
			if(Character.isLetter(nextChar))
				charClass = LETTER;
			else if(Character.isDigit(nextChar))
				charClass = DIGIT;
			else 
				charClass = UNKNOWN;
		}	
		else 
			charClass = EOF;
		
		index++;
	}
	
	// getNonBlank - a function to call getChar until it returns a non-whitespace character
	 
	private static void getNonBlank() throws IOException {
		while (Character.isWhitespace(nextChar)){
			getChar();
		}		
	}
	
	private static int lex() throws IOException{
		lexeme = new char[100];
		lexLen = 0;
		getNonBlank();
		switch (charClass) {
		/* Parse identifiers */
			case LETTER:
				addChar();
				getChar();
				while (charClass == LETTER || charClass == DIGIT) {
					addChar();
					getChar();
				}
				nextToken = IDENT;
				break;
			/* Parse integer literals */
			case DIGIT:
				addChar();
				getChar();
				while (charClass == DIGIT) {
					addChar();
					getChar();
				}
				nextToken = INT_LIT;
				break;
			/* Parentheses and operators */
			case UNKNOWN:
				lookup(nextChar);
				getChar();
				break;
		
		
			case EOF:
				nextToken = EOF;
				lexeme[0] = 'E';
				lexeme[1] = 'O';
				lexeme[2] = 'F';
				lexeme[3] = 0;
				break;			
		}
		if (nextToken != EOF) {
			System.out.printf("Next token is: %-15s Next lexeme is ", nextToken);
			System.out.println(lexeme);		
		}
		return 0;
	}
	
	
	//checks to see if the char is at value "index", starts the getChar method
    private static boolean isValid() throws java.lang.StringIndexOutOfBoundsException{
        try {
            nextChar = line.charAt(index);
            return true;
        }
        catch(java.lang.StringIndexOutOfBoundsException e){
            return false;
        }
    }
 
    
    // creates a new character Array
    private static void nextLine() {
    	index = 0;
        lexeme = new char[100];
    }	
}

